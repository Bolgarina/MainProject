#include "./Shader.h"

#include <iostream>
#include <fstream>
#include <sstream>

Shader::Shader() : shader_id(0)
{
}

Shader::~Shader()
{
	glDeleteShader(shader_id);
}

void Shader::init(const GLenum &i_type, const std::string &i_fileName)
{
	shader_id = glCreateShader(i_type); // This function returns 0 if an error occurs creating the shader object
										// GL_INVALID_ENUM is generated if shaderType is not an accepted value.

	unsigned int glErr = glGetError();
	if (glErr == GL_INVALID_ENUM)
		std::cout << "Shader type is incorrect." << std::endl;
	else
	{
		std::string shader_content = loadFromFile(i_fileName);
		const char* shader_source = shader_content.c_str();

		glShaderSource(shader_id, 1, &shader_source, 0);

		// GL_INVALID_VALUE is generated if shader_id is not a value generated by OpenGL.
		// GL_INVALID_OPERATION is generated if shader_id is not a shader object.
		unsigned int glErr = glGetError();
		if ((glErr == GL_INVALID_VALUE) || (glErr == GL_INVALID_OPERATION))
			std::cout << "Error occurred when OpenGL was copying the shader source code (glShaderSource)" << std::endl;
	}
}

const GLuint &Shader::id() const
{
	return shader_id;
}

void Shader::compile() const
{
	glCompileShader(shader_id);
}

std::string Shader::loadFromFile(const std::string &i_fileName) const
{
	std::ifstream file(i_fileName.c_str());

	if (!file.is_open())
	{
		std::cout << "Failed to open file: " << i_fileName << std::endl;
		exit(-1);
	}

	std::stringstream stream;
	stream << file.rdbuf();

	file.close();

	return stream.str();
}